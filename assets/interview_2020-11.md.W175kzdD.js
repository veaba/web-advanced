import{_ as s,c as a,o as l,aa as e}from"./chunks/framework.qnqjiyko.js";const E=JSON.parse('{"title":"2020 年 11 月面试题以及常见面试题","description":"","frontmatter":{},"headers":[],"relativePath":"interview/2020-11.md","filePath":"interview/2020-11.md"}'),n={name:"interview/2020-11.md"};function t(h,i,p,k,r,d){return l(),a("div",null,i[0]||(i[0]=[e(`<h1 id="_2020-年-11-月面试题以及常见面试题" tabindex="-1">2020 年 11 月面试题以及常见面试题 <a class="header-anchor" href="#_2020-年-11-月面试题以及常见面试题" aria-label="Permalink to &quot;2020 年 11 月面试题以及常见面试题&quot;">​</a></h1><h2 id="使用-vue-3" tabindex="-1">使用 Vue 3 <a class="header-anchor" href="#使用-vue-3" aria-label="Permalink to &quot;使用 Vue 3&quot;">​</a></h2><h2 id="vue-2-生命周期-11" tabindex="-1">Vue 2 生命周期 (11) <a class="header-anchor" href="#vue-2-生命周期-11" aria-label="Permalink to &quot;Vue 2 生命周期 (11)&quot;">​</a></h2><ul><li>beforeCreate <ul><li>用途：实例初始化后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。</li><li>源码： <ul><li><code>initMixin(Vue)</code></li><li><code>stateMixin(Vue)</code></li><li><code>eventsMixin(Vue)</code><ul><li><code>$once</code></li><li><code>$off</code></li><li><code>$emit</code></li><li><code>$on</code></li></ul></li><li><code>lifecycleMixin(Vue)</code></li><li><code>renderMixin(Vue)</code></li></ul></li><li>场景：</li></ul></li><li>created <ul><li>用途：实例创建完成后，被立即调用，已完成数据观测和方法的运算，watch/event 回调，但挂载未开始，<code>$el</code> property 不可用</li><li>场景：</li></ul></li><li>beforeMount <ul><li>用途：挂载开始之前被调用，相关 render 函数首次被调用</li><li>场景：<strong>服务器渲染期间不可被调用</strong></li></ul></li><li>mounted <ul><li>用途： <ul><li>实例挂载 dom，<code>el</code> 被新创建的 <code>vm.$el</code> 替换。</li><li>但不会保证所有子组件也都被一起被挂载，除非在 mounted 内部使用 vm.$nextTick</li></ul></li></ul></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:(){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 整个视图渲染完毕才会运行此代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>场景：<strong>服务器渲染期间不可被调用</strong></li><li>beforeUpdate <ul><li>用途： <ul><li>数据更新时调用，发生在虚拟 DOM 打补丁之前</li><li>适合在更新之前访问现有 DOM，比如移除已添加的事件监听器</li></ul></li><li>场景：<strong>服务器渲染期间不可被调用，因为初次渲染会在服务端进行</strong></li></ul></li><li>updated <ul><li>用途： <ul><li>数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后调用此钩子</li><li>组件 DOM 已更新，可执行依赖 DOM 的操作</li><li>应避免在此期间更改状态，比如对 data 再做更改，通常使用 watcher 和 computed</li><li>不保证所有子组件都被一起被重绘，除非：</li></ul></li></ul></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:(){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 整个视图渲染完毕才会运行此代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>场景：<strong>该钩子在服务器端渲染期间不被调用。</strong></li><li>activated <ul><li>用途：被 <code>keep-alive</code> 缓存的组件激活时调用</li><li>场景：<strong>该钩子在服务器端渲染期间不被调用。</strong></li></ul></li><li>deactivated <ul><li>用途：被 <code>keep-alive</code> 缓存的组件停用时调用。</li><li>场景：<strong>该钩子在服务器端渲染期间不被调用。</strong></li></ul></li><li>beforeDestroy <ul><li>用途：实例销毁之前调用，在这一步，实例依然可以使用？</li><li>场景： <ul><li>什么场景下实例被销毁？</li><li><strong>该钩子在服务器端渲染期间不被调用。</strong></li></ul></li></ul></li><li>destroyed <ul><li>用途： <ul><li>实例被销毁后</li><li>所有指令都被解绑</li><li>移除所有事件监听器</li><li>所有子实例被销毁</li></ul></li><li>场景：<strong>该钩子在服务器端渲染期间不被调用。</strong></li></ul></li><li>errorCaptured <ul><li>用途： <ul><li>当捕获子孙组件错误时被调用</li><li>三个参数：错误对象，发送错误的组件实例，包含错误来源信息</li><li>可返回 false 以阻止继续传播</li><li>模板或渲染函数有一个条件判断绕开其他内容，否则无限渲染循环</li></ul></li><li>错误规则： <ul><li><code>config.errorHandler</code> 被定义，所有错误仍向它发送</li><li>组件的继承或父级从属链路存在多个 <code>errorCaptured</code>，则被相同错误逐个唤起</li><li><code>errorCaptured</code> 自身抛出一个错误，则会和原本捕获的错误都发送到 <code>config.captured</code></li><li><code>errorCaptured</code> 返回 <code>false</code>，意思是：这个错误搞定了可以被忽略，会阻止其他任何被这个错误唤起的 <code>errorCaptured</code> 钩子和全局 <code>config.errorHandler</code></li></ul></li><li>场景：</li></ul></li></ul><h2 id="vue-3-生命周期-13" tabindex="-1">Vue 3 生命周期 (13) <a class="header-anchor" href="#vue-3-生命周期-13" aria-label="Permalink to &quot;Vue 3 生命周期 (13)&quot;">​</a></h2><ul><li>beforeCreate</li><li>created</li><li>beforeMount</li><li>mounted</li><li>beforeUpdate</li><li>updated</li><li>activated</li><li>deactivated</li><li><strong>beforeUnmount</strong><ul><li>用途：以前的 beforeDestroy</li><li>场景：</li></ul></li><li><strong>unmounted</strong><ul><li>用途：以前的 destroyed</li><li>场景：</li></ul></li><li>errorCaptured</li><li><strong>renderTracked</strong><ul><li>用途： <ul><li>跟踪虚拟 DOM 重新渲染被调用</li><li>接受 <code>debugger: event</code> 作为参数，并告诉哪个操作跟踪了组件以及操作目标的对象和键</li></ul></li></ul></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> renderTracked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ key, target, type }) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ key, target, type })</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* 当组件第一次渲染时，这将被记录下来:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		key: &quot;cart&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		target: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			cart: 0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		},</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		type: &quot;get&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	},</span></span></code></pre></div><ul><li><strong>renderTriggered</strong><ul><li>用途： <ul><li>虚拟 DOM 重新渲染为 triggered.Similarly 为 <code>renderTriggered</code> 触发</li></ul></li><li>场景：</li></ul></li></ul><h2 id="vue-2-与-vue-3-生命周期区别" tabindex="-1">Vue 2 与 Vue 3 生命周期区别 <a class="header-anchor" href="#vue-2-与-vue-3-生命周期区别" aria-label="Permalink to &quot;Vue 2 与 Vue 3 生命周期区别&quot;">​</a></h2><h3 id="选项-api-与组合式-api-之间映射" tabindex="-1">选项 API 与组合式 API 之间映射 <a class="header-anchor" href="#选项-api-与组合式-api-之间映射" aria-label="Permalink to &quot;选项 API 与组合式 API 之间映射&quot;">​</a></h3><ul><li><p>beforeCreate -&gt; use setup()</p></li><li><p>created -&gt; use setup()</p></li><li><p>beforeMount -&gt; onBeforeMount</p></li><li><p>mounted -&gt; onMounted</p></li><li><p>beforeUpdate -&gt; onBeforeUpdate</p></li><li><p>updated -&gt; onUpdated</p></li><li><p>beforeUnmount -&gt; onBeforeUnmount</p></li><li><p>unmounted -&gt; onUnmounted</p></li><li><p>errorCaptured -&gt; onErrorCaptured</p></li><li><p>renderTracked -&gt; onRenderTracked</p></li><li><p>renderTriggered -&gt; onRenderTriggered</p></li></ul><h2 id="beforecreated-用生命作用" tabindex="-1">beforeCreated 用生命作用 <a class="header-anchor" href="#beforecreated-用生命作用" aria-label="Permalink to &quot;beforeCreated 用生命作用&quot;">​</a></h2><h2 id="mixin-的生命周期" tabindex="-1">mixin 的生命周期 <a class="header-anchor" href="#mixin-的生命周期" aria-label="Permalink to &quot;mixin 的生命周期&quot;">​</a></h2><h2 id="mixin-是怎么执行" tabindex="-1">mixin 是怎么执行 <a class="header-anchor" href="#mixin-是怎么执行" aria-label="Permalink to &quot;mixin 是怎么执行&quot;">​</a></h2><h2 id="mixin-的实现原理" tabindex="-1">mixin 的实现原理 <a class="header-anchor" href="#mixin-的实现原理" aria-label="Permalink to &quot;mixin 的实现原理&quot;">​</a></h2><h2 id="var、let、const-的区别以及使用的场景" tabindex="-1">var、let、const 的区别以及使用的场景 <a class="header-anchor" href="#var、let、const-的区别以及使用的场景" aria-label="Permalink to &quot;var、let、const 的区别以及使用的场景&quot;">​</a></h2><h2 id="typescript-泛型以及使用场景" tabindex="-1">TypeScript 泛型以及使用场景 <a class="header-anchor" href="#typescript-泛型以及使用场景" aria-label="Permalink to &quot;TypeScript 泛型以及使用场景&quot;">​</a></h2><h2 id="scss-变量可以摆覆盖吗" tabindex="-1">scss 变量可以摆覆盖吗？ <a class="header-anchor" href="#scss-变量可以摆覆盖吗" aria-label="Permalink to &quot;scss 变量可以摆覆盖吗？&quot;">​</a></h2><h2 id="网站性能提升" tabindex="-1">网站性能提升 <a class="header-anchor" href="#网站性能提升" aria-label="Permalink to &quot;网站性能提升&quot;">​</a></h2><h2 id="动态新增-src-地址的的-js-是异步的吗" tabindex="-1">动态新增 src 地址的的 js 是异步的吗？ <a class="header-anchor" href="#动态新增-src-地址的的-js-是异步的吗" aria-label="Permalink to &quot;动态新增 src 地址的的 js 是异步的吗？&quot;">​</a></h2><h2 id="如果在上题目加了-defer-呢" tabindex="-1">如果在上题目加了 defer 呢？ <a class="header-anchor" href="#如果在上题目加了-defer-呢" aria-label="Permalink to &quot;如果在上题目加了 defer 呢？&quot;">​</a></h2><p>如果不加 <code>defer</code></p><h2 id="如何实现多行省略号" tabindex="-1">如何实现多行省略号 <a class="header-anchor" href="#如何实现多行省略号" aria-label="Permalink to &quot;如何实现多行省略号&quot;">​</a></h2><ul><li>css</li><li>js 放置图片</li></ul><h2 id="说一下-i18n" tabindex="-1">说一下 i18n <a class="header-anchor" href="#说一下-i18n" aria-label="Permalink to &quot;说一下 i18n&quot;">​</a></h2><h2 id="了解-promise" tabindex="-1">了解 promise <a class="header-anchor" href="#了解-promise" aria-label="Permalink to &quot;了解 promise&quot;">​</a></h2><ul><li>解决了什么问题？</li><li>它的三种状态？</li></ul><h2 id="webpack-了解吗-是用做什么" tabindex="-1">webpack 了解吗？是用做什么？ <a class="header-anchor" href="#webpack-了解吗-是用做什么" aria-label="Permalink to &quot;webpack 了解吗？是用做什么？&quot;">​</a></h2><h2 id="写一个函数实现-12345678-12-345-678" tabindex="-1">写一个函数实现 ”12345678 “=&gt; “12,345,678” <a class="header-anchor" href="#写一个函数实现-12345678-12-345-678" aria-label="Permalink to &quot;写一个函数实现 ”12345678 “=&gt; “12,345,678”&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;12345678&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)(?=(?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{3}</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+$</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;$1,&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 问题1: 如果左边不含数字</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// \`(?=)\` 匹配校验，但不出现在匹配结果字符串里</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// \`(?:)\` 匹配校验，出现在匹配结果里</span></span></code></pre></div><h2 id="chrome-支持-module" tabindex="-1">Chrome 支持 module <a class="header-anchor" href="#chrome-支持-module" aria-label="Permalink to &quot;Chrome 支持 module&quot;">​</a></h2><ul><li>Chrome 从 61 版本开始支持 es6 module</li><li>最开始的版本，需要打开 flag JavaScript 的实验性功能</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;en&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> charset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;viewport&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Document&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./ab.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// a.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> aa</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;aaa&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { aa };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// b.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bb</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;bbb&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { bb };</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ab.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { aa } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./a.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { bb } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./b.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11111111111</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(aa </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bb);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ab.js:4 11111111111</span></span>
<span class="line"><span>ab.js:5 aaabbb</span></span></code></pre></div>`,39)]))}const c=s(n,[["render",t]]);export{E as __pageData,c as default};
