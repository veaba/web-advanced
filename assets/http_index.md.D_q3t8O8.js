import{_ as d,C as r,c as o,o as l,j as e,G as i,aa as h,a as p}from"./chunks/framework.qnqjiyko.js";const m=JSON.parse('{"title":"HTTP 协议","description":"","frontmatter":{"sidebar":"auto"},"headers":[],"relativePath":"http/index.md","filePath":"http/index.md"}'),s={name:"http/index.md"};function n(T,t,c,P,_,b){const a=r("Catalog");return l(),o("div",null,[t[0]||(t[0]=e("h1",{id:"http-协议",tabindex:"-1"},[p("HTTP 协议 "),e("a",{class:"header-anchor",href:"#http-协议","aria-label":'Permalink to "HTTP 协议"'},"​")],-1)),i(a,{base:"/http"}),t[1]||(t[1]=h('<h2 id="rest-api-和客户端库的区别" tabindex="-1">REST API 和客户端库的区别 <a class="header-anchor" href="#rest-api-和客户端库的区别" aria-label="Permalink to &quot;REST API 和客户端库的区别&quot;">​</a></h2><p><code>来源于一项API服务对比的页面，</code></p><table tabindex="0"><thead><tr><th>用例</th><th>REST API</th><th>客户端库</th></tr></thead><tbody><tr><td>转换短语音音频，例如无中间结果的命令（音频长度 &lt; 15 秒）</td><td>是</td><td>是</td></tr><tr><td>转换长音频（&gt; 15 秒）</td><td>否</td><td>是</td></tr><tr><td>流式传输具有所需中间结果的音频</td><td>否</td><td>是</td></tr><tr><td>了解使用 LUIS 从音频转换的文本</td><td>是</td><td>是</td></tr><tr><td>是不是 HTTP</td><td>是</td><td>不一定，比如 WebSocket</td></tr></tbody></table><h2 id="http-和-https-的比较" tabindex="-1">http 和 https 的比较 <a class="header-anchor" href="#http-和-https-的比较" aria-label="Permalink to &quot;http 和 https 的比较&quot;">​</a></h2><h2 id="http1-1-和-http2-0-比较" tabindex="-1">HTTP1.1 和 HTTP2.0 比较 <a class="header-anchor" href="#http1-1-和-http2-0-比较" aria-label="Permalink to &quot;HTTP1.1 和 HTTP2.0 比较&quot;">​</a></h2><ol><li><p>HTTP2.0 采用二进制格式，而非文本格式</p><ul><li>二进制解析更高效</li></ul></li><li><p>HTTP2.0 <code>完全多路复用</code>，而非有序并阻塞，仅需一个连接即可并行</p><ul><li><code>多路复用是什么意思？</code></li></ul></li><li><p>使用报头压缩，HTTP2.0 降低了开销</p></li><li><p>HTTP2.0 让服务器可以将响应主动 “推送” 到客户端缓存中</p></li></ol>',6))])}const x=d(s,[["render",n]]);export{m as __pageData,x as default};
