import{_ as s,c as a,o as l,aa as n}from"./chunks/framework.qnqjiyko.js";const o=JSON.parse('{"title":"性能提升","description":"","frontmatter":{"sidebar":"auto"},"headers":[],"relativePath":"frontend/performance/index.md","filePath":"frontend/performance/index.md"}'),t={name:"frontend/performance/index.md"};function e(h,i,p,k,r,d){return l(),a("div",null,i[0]||(i[0]=[n(`<h1 id="性能提升" tabindex="-1">性能提升 <a class="header-anchor" href="#性能提升" aria-label="Permalink to &quot;性能提升&quot;">​</a></h1><p>网页性能管理详解 ——阮一峰 <a href="http://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html" target="_blank" rel="noreferrer">http://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html</a></p><h2 id="前端常见的性能优化请求手段" tabindex="-1">前端常见的性能优化请求手段 <a class="header-anchor" href="#前端常见的性能优化请求手段" aria-label="Permalink to &quot;前端常见的性能优化请求手段&quot;">​</a></h2><p>加快资源的加载速度，减少白屏事件</p><ul><li>CDN 内容分发</li><li>css Sprite 图片合并</li><li>Compress/Gzip 资源文件压缩</li><li>Async/Defer 异步加载</li><li>HTTP Cache HTTP 缓存 ....</li></ul><h2 id="html-css-重绘回流-repaint、reflow" tabindex="-1">html/css 重绘回流 (Repaint、Reflow) <a class="header-anchor" href="#html-css-重绘回流-repaint、reflow" aria-label="Permalink to &quot;html/css 重绘回流 (Repaint、Reflow)&quot;">​</a></h2><ul><li>display:none 不会发生回流和重绘</li><li>回流一定触发重绘，重绘不一定会触发回流</li><li>复杂动画，使用 <code>position: absolute</code> 使其脱离文档流</li><li>css3 硬件加速 (GPU 加速)</li><li>css3 硬件加速下以下属性不会发生重绘回流： <ul><li>transform</li><li>opacity</li><li>filters</li></ul></li><li>使用 fixed 和 absolute，如果修改 css 不会发生回流</li></ul><h3 id="重绘-repaint" tabindex="-1">重绘 (repaint) <a class="header-anchor" href="#重绘-repaint" aria-label="Permalink to &quot;重绘 (repaint)&quot;">​</a></h3><h3 id="回流-reflow" tabindex="-1">回流 (reflow) <a class="header-anchor" href="#回流-reflow" aria-label="Permalink to &quot;回流 (reflow)&quot;">​</a></h3><p>回流 (reflow)：布局引擎为 frame (框架) 计算图形的过程，一个 frame 回流会导致所有父节点以及后续元素都会回流。</p><ul><li>理论上发生回流的原因 <ul><li>初始化 (initial)。dom 载入后第一次回流，遍历所有 frame</li><li>渐进 (incremental)。一个 frame 发生渐进 reflow 时，前面没变，自己内部发生变化。</li><li>改变大小。容器边界发生变化，内部没变，复用内部状态</li><li>样式改变。整个 frame 都会遍历</li><li>dirty。(脏的) 已缓存了多个子元素的渐进回流时。</li></ul></li><li>具体的操作原因： <ul><li>窗口大小变化</li><li>更改文档默认字体</li><li>样式表改变</li><li>元素内容变化，尤其是输入控件 <ul><li>input textarea</li></ul></li><li>dom 操作</li><li>渐进回流，会使浏览器将渐进队列冲洗，立即执行回流 <ul><li>offsetWidth、offsetHeight 计算。整个可视区域大小，包括 border scrollBar 在内</li><li>width、height 计算。</li><li>clientWidth 计算内部可视区域大小。</li><li>scrollTop 计算。元素内容向上滚动了多少像素。</li><li>scrollHeight 计算。元素内容的高度，包括溢出的部分</li></ul></li></ul></li><li>避免回流 <ul><li>避免逐项更改 style</li><li>避免循环操作 dom</li><li>避免循环读取 offsetLeft 等属性，并在循环之前存起来</li><li>绝对定位具有复杂变化的动画元素。position:absolute 脱离文档流，否则会引起父元素以及后续元素的大量回流。css3 transition 性能不错</li></ul></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 一次bad 的demo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.body.style;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dom.padding </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;2px&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 回流+重绘</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dom.border </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1px solid&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 回流+重绘</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dom.border </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;blue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 重绘</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dom.backgroundColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;#ccc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 重绘</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dom.fontSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;14px&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 重绘+回流</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createTextNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello world!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre></div><p>解决办法</p><ol><li>写 style 更改 class</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.body.className </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;dom&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.dom { padding:2px; border:1px solid; background-color:#ccc; font-size:14px }</span></span></code></pre></div><ol start="2"><li>一次添加全部的 style 操作</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.body.style;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;padding:2px;border:1px solid;background-color:#ccc;font-size:14px&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>重绘 (repaint)：发生在元素的可见性发生变化时产生重新渲染的现象，回流必然引起重绘：</p><ul><li>background</li><li>color</li></ul><h2 id="常见的内存泄露的问题" tabindex="-1">常见的内存泄露的问题 <a class="header-anchor" href="#常见的内存泄露的问题" aria-label="Permalink to &quot;常见的内存泄露的问题&quot;">​</a></h2><h3 id="闭包在-ie9-之前的版本会导致一些特殊的问题。" tabindex="-1">闭包在 IE9 之前的版本会导致一些特殊的问题。 <a class="header-anchor" href="#闭包在-ie9-之前的版本会导致一些特殊的问题。" aria-label="Permalink to &quot;闭包在 IE9 之前的版本会导致一些特殊的问题。&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 内存泄漏</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> click1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onclick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element.id);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// fix 版本</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> click2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element2.id; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 引用赋值，消除变量循环引用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  element2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onclick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 设置为null，解除对DOM对象的引用，减少计数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  element2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,23)]))}const c=s(t,[["render",e]]);export{o as __pageData,c as default};
