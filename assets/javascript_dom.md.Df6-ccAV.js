import{_ as d,c as e,o as r,aa as o}from"./chunks/framework.qnqjiyko.js";const h=JSON.parse('{"title":"DOM 对象","description":"","frontmatter":{"sidebar":"auto"},"headers":[],"relativePath":"javascript/dom.md","filePath":"javascript/dom.md"}'),c={name:"javascript/dom.md"};function n(l,t,m,a,i,s){return r(),e("div",null,t[0]||(t[0]=[o('<h1 id="dom-对象" tabindex="-1">DOM 对象 <a class="header-anchor" href="#dom-对象" aria-label="Permalink to &quot;DOM 对象&quot;">​</a></h1><ul><li>document 对象，文档，window 的属性</li><li><a href="http://www.w3school.com.cn/xmldom/dom_htmlelement.asp" target="_blank" rel="noreferrer">xml DOM</a></li><li>document 是文档 (整个 DOM 树) 的根节点</li><li>对于 DOM 元素，children 是指 DOM Object 类型的子对象，不包括 tag 之间隐形存在的 TextNode，而 childNodes 包括 tag 之间隐形存在的 TextNode 对象</li><li>domContentLoaded 事件早于 onload</li></ul><h2 id="知识点" tabindex="-1">知识点 <a class="header-anchor" href="#知识点" aria-label="Permalink to &quot;知识点&quot;">​</a></h2><ul><li>document 是一个 document node</li><li>elements 都是 element node</li><li>comments 不都是 document node</li><li>element 内的 text 内容也是 text node</li></ul><h2 id="dom-继承顺序" tabindex="-1">dom 继承顺序 <a class="header-anchor" href="#dom-继承顺序" aria-label="Permalink to &quot;dom 继承顺序&quot;">​</a></h2><p><code>HTMLDivElement</code> &gt; <code>HTMLElement</code> &gt; <code>Element</code> &gt; <code>Node</code> &gt; <code>EventTarget</code></p><h2 id="document-对象属性-方法" tabindex="-1">Document 对象属性+方法 <a class="header-anchor" href="#document-对象属性-方法" aria-label="Permalink to &quot;Document 对象属性+方法&quot;">​</a></h2><p><a href="http://www.runoob.com/jsref/dom-obj-document.html" target="_blank" rel="noreferrer">document 对象属性一览表</a></p><table tabindex="0"><thead><tr><th>属性或方法</th><th>描述</th></tr></thead><tbody><tr><td>document.activeElement</td><td>返回当前获取焦点元素</td></tr><tr><td><code>document.addEventListener()</code></td><td>向文档添加句柄</td></tr><tr><td><code>document.adoptNode(node)</code></td><td></td></tr><tr><td>document.anchors</td><td><code>a标签中需要含有name才能获取！</code></td></tr><tr><td>document.baseURI</td><td>返回绝对基础 URI</td></tr><tr><td>document.body</td><td>返回文档 body 元素</td></tr><tr><td><code>document.close()</code></td><td>关闭 document.open 的输出流</td></tr><tr><td>document.cookie</td><td>返回所有的 cookie 字符串</td></tr><tr><td><code>document.createAttribute()</code></td><td>创建属性节点</td></tr><tr><td><code>document.createComment()</code></td><td>竟然能创建一段注释的节点，亮瞎狗眼</td></tr><tr><td>document.<code>createDocumentFragment()</code></td><td>创建空 DocumentFragment 并返回，对多节点循环创建性能更优</td></tr><tr><td><code>document.createElement()</code></td><td>创建元素节点</td></tr><tr><td><code>document.createTextNode()</code></td><td>创建文档节点,不太实际</td></tr><tr><td>document.doctype</td><td>返回与文档相关的文档类型声明 (DTD)。</td></tr><tr><td>document.documentElement</td><td>返回根节点</td></tr><tr><td>document.documentMode</td><td>返回渲染模式</td></tr><tr><td>document.documentURI</td><td>设置或返回文档的位置</td></tr><tr><td>document.domain</td><td>返回当前文档的域名。</td></tr><tr><td>document.embeds</td><td>返回文档中所有嵌入的内容（embed）集合</td></tr><tr><td>document.forms</td><td>返回对文档中所有 Form 对象引用。</td></tr><tr><td>document.<code>getElementByClassName()</code></td><td>返回指定 <code>class</code> 的 <code>NodeList</code> 对象</td></tr><tr><td>document.<code>getElementById()</code></td><td>id 第一个对象引用</td></tr><tr><td>document.<code>getElementByName</code></td><td>名称对象集合</td></tr><tr><td>document.<code>getElementByTagName</code></td><td>标签对象集合</td></tr><tr><td>document.<code>images</code></td><td>返回所有 Image 对象引用</td></tr><tr><td>document.implementation</td><td>啥玩意</td></tr><tr><td><code>document.importNode()</code></td><td>把一个节点从另一个文档复制到该文档以便应用。</td></tr><tr><td>document.inputEncoding</td><td>返回文档编码方式，比如 <code>UTF-8</code></td></tr><tr><td>document.lastModified</td><td>返回文档最后被修改的时间</td></tr><tr><td>document.links</td><td>返回所有 <code>a</code> 标签</td></tr><tr><td><code>document.normalize()</code></td><td>删除空文本节点，并连接相邻及节点，<code>createTextNode</code> 创建的节点。</td></tr><tr><td><code>document.normalizeDocument()</code></td><td></td></tr><tr><td><code>document.open()</code></td><td>打开一个流，以收集任何 <code>document.write</code> 或 <code>writenlen()</code>方法的输出</td></tr><tr><td><code>document.querySelector()</code></td><td>匹配 <code>css</code> 选择器的第一个元素</td></tr><tr><td><code>document.querySelectorAll()</code></td><td>返回匹配 <code>css</code> 选择的所有元素节点的列表</td></tr><tr><td>document.readyState</td><td>返回文档状态 <code>uninitialized</code> <code>loading</code> <code>interactive</code> <code>complete</code></td></tr><tr><td>document.referer</td><td>返回上一个文档的 URL</td></tr><tr><td><code>document.removeEventListener()</code></td><td>移除 addEventListener()添加的句柄</td></tr><tr><td>document.scripts</td><td>返回所有脚本的集合</td></tr><tr><td>document.strictErrorChecking</td><td>设置或返回是否强制进行错误检查。</td></tr><tr><td>document.title</td><td>返回 <code>title</code></td></tr><tr><td>document.URL</td><td>返回完整的 <code>URL</code></td></tr><tr><td><code>document.write()</code></td><td>写 <code>html</code> 表达式或者 <code>js</code> 代码，重写整个文档</td></tr><tr><td><code>document.writeln()</code></td><td>等同 <code>write</code>，但带有换行符</td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="html-dom-属性对象" tabindex="-1">HTML DOM 属性对象 <a class="header-anchor" href="#html-dom-属性对象" aria-label="Permalink to &quot;HTML DOM 属性对象&quot;">​</a></h2><table tabindex="0"><thead><tr><th>属性 或 方法</th><th>描述</th></tr></thead><tbody><tr><td>attr.idId</td><td>是 id，true，否则 false</td></tr><tr><td>attr.name</td><td></td></tr><tr><td>attr.value</td><td></td></tr><tr><td>attr.specified</td><td>返回被指定的属性，true，否则 false</td></tr><tr><td><code>nodemap.getNamedItem()</code></td><td><code>btn.attributes.getNamedItem(&quot;onclick&quot;).textContent;</code> 返回 onclick</td></tr><tr><td><code>nodemap.item()</code></td><td></td></tr><tr><td>nodemap.length</td><td>查看元素带有多少个属性。<code>error</code></td></tr><tr><td><code>nodemap.removeNamedItem()</code></td><td>移除指定属性节点</td></tr><tr><td><code>nodemap.setNamedItem</code></td><td>设置指定属性节点，通过名称</td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="html-dom-元素对象" tabindex="-1">HTML DOM 元素对象 <a class="header-anchor" href="#html-dom-元素对象" aria-label="Permalink to &quot;HTML DOM 元素对象&quot;">​</a></h2><blockquote><p>详细 <a href="http://www.runoob.com/jsref/dom-obj-all.html" target="_blank" rel="noreferrer">http://www.runoob.com/jsref/dom-obj-all.html</a></p></blockquote><table tabindex="0"><thead><tr><th>属性 或 方法</th><th>描述</th></tr></thead><tbody><tr><td>element.accessKey</td><td>设置或者返回 accessKey 一个元素</td></tr><tr><td>element.attributes</td><td>返回一个元素的属性数组</td></tr><tr><td>element.childNodes</td><td>返回一个元素的子元素数组</td></tr><tr><td>element.children</td><td>返回一个子元素的集合</td></tr><tr><td>element.classList</td><td>返回元素的类型，作为 DOM Token 对象</td></tr><tr><td>element.className</td><td>设置或者返回 class 名称</td></tr><tr><td>element.clientHeight</td><td>返回整数，浏览器当前视窗的文档高度</td></tr><tr><td>element.clientWidth</td><td>返回整数，浏览器当前视窗的文档宽度</td></tr><tr><td>element.contentEditable</td><td>如果设置为 true 则可编辑。false 不可编辑</td></tr><tr><td>element.dir</td><td></td></tr><tr><td>element.firstChild</td><td></td></tr><tr><td>element.id</td><td></td></tr><tr><td>element.innerHTML</td><td></td></tr><tr><td>element.isContentEditable</td><td></td></tr><tr><td>element.lang</td><td></td></tr><tr><td>element.lastChild</td><td></td></tr><tr><td>element.namespaceURL</td><td></td></tr><tr><td>element.nextSibling</td><td></td></tr><tr><td>element.nextElementSibling</td><td></td></tr><tr><td>element.nodeName</td><td></td></tr><tr><td>element.nodeType</td><td></td></tr><tr><td>element.nodeValue</td><td></td></tr><tr><td>element.offsetHeight</td><td></td></tr><tr><td>element.offsetWidth</td><td></td></tr><tr><td>element.offsetLeft</td><td></td></tr><tr><td>element.offsetParent</td><td></td></tr><tr><td>element.offsetTop</td><td></td></tr><tr><td>element.ownerDocument</td><td></td></tr><tr><td>element.parentNode</td><td></td></tr><tr><td>element.previousSibling</td><td></td></tr><tr><td>element.previousElementSibling</td><td></td></tr><tr><td>element.scrollHeight</td><td></td></tr><tr><td>element.scrollLeft</td><td></td></tr><tr><td>element.scrollTop</td><td></td></tr><tr><td>element.scrollWidth</td><td></td></tr><tr><td>element.style</td><td></td></tr><tr><td>element.tabIndex</td><td></td></tr><tr><td>element.tagName</td><td></td></tr><tr><td>element.textContent</td><td></td></tr><tr><td>nodeList.length</td><td></td></tr><tr><td><code>element.addEventListener()</code></td><td>指定元素添加事件句柄？？句柄啥玩意</td></tr><tr><td><code>element.appendChild()</code></td><td>添加一个子元素</td></tr><tr><td><code>element.cloneNode()</code></td><td></td></tr><tr><td><code>element.compareDocumentPosition()</code></td><td></td></tr><tr><td><code>element.focus()</code></td><td></td></tr><tr><td><code>element.getAttribute()</code></td><td></td></tr><tr><td><code>element.getAttributeNode()</code></td><td></td></tr><tr><td><code>element.getElementsByTagName()</code></td><td></td></tr><tr><td><code>element.getElementsByClassName()</code></td><td></td></tr><tr><td><code>element.getFeature()</code></td><td></td></tr><tr><td><code>element.getUserData()</code></td><td></td></tr><tr><td><code>element.hasAttribute()</code></td><td></td></tr><tr><td><code>element.hasAttributes()</code></td><td></td></tr><tr><td><code>element.hasChildNodes()</code></td><td></td></tr><tr><td><code>element.hasFocus()</code></td><td></td></tr><tr><td><code>element.insertBefore()</code></td><td>插入,已选择的.insertBefore(parentNode,ChildNode) <a href="https://github.com/veaba/web-advanced-frond-end/tree/master/demos/js/document.js/#L26" target="_blank" rel="noreferrer">insertBefore</a></td></tr><tr><td><code>element.isDefaultNamespace()</code></td><td></td></tr><tr><td><code>element.isEqualNode()</code></td><td></td></tr><tr><td><code>element.isSameNode()</code></td><td></td></tr><tr><td><code>element.isSupported()</code></td><td></td></tr><tr><td><code>element.normalize()</code></td><td></td></tr><tr><td><code>document.querySelector()</code></td><td></td></tr><tr><td><code>document.querySelectorAll()</code></td><td></td></tr><tr><td><code>element.removeAttribute()</code></td><td></td></tr><tr><td><code>element.removeAttributeNode()</code></td><td></td></tr><tr><td><code>element.removeChild()</code></td><td></td></tr><tr><td><code>element.removeEventListener()</code></td><td></td></tr><tr><td><code>element.replaceChild()</code></td><td>替换</td></tr><tr><td><code>element.setAttribute()</code></td><td></td></tr><tr><td><code>element.setAttributeNode()</code></td><td></td></tr><tr><td><code>element.setIdAttribute()</code></td><td></td></tr><tr><td><code>element.setIdAttributeNode()</code></td><td></td></tr><tr><td><code>element.setUserData()</code></td><td></td></tr><tr><td><code>element.toString()</code></td><td></td></tr><tr><td><code>nodeList.item()</code></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="console-对象" tabindex="-1">Console 对象 <a class="header-anchor" href="#console-对象" aria-label="Permalink to &quot;Console 对象&quot;">​</a></h3><h3 id="cssstyle-对象" tabindex="-1">CssStyle 对象 <a class="header-anchor" href="#cssstyle-对象" aria-label="Permalink to &quot;CssStyle 对象&quot;">​</a></h3><table tabindex="0"><thead><tr><th>属性 或 方法</th><th>描述</th></tr></thead><tbody><tr><td>cssText</td><td>style 属性,<code>document.body[0].style.cssText</code></td></tr><tr><td>length</td><td></td></tr><tr><td>parentRule</td><td></td></tr><tr><td><code>getPropertyPriority()</code></td><td>指定是否设置了 <code>!important</code> 属性</td></tr><tr><td><code>getPropertyValue()</code></td><td>返回指定的 css 属性值</td></tr><tr><td><code>item()</code></td><td>通过索引方式返回 css 声明的 css 属性名</td></tr><tr><td><code>removeProperty()</code></td><td>移除 css 声明中的 css 属性</td></tr><tr><td><code>setProperty()</code></td><td>在 css 声明块中新建或者修改 css 属性</td></tr><tr><td></td><td></td></tr></tbody></table>',17)]))}const b=d(c,[["render",n]]);export{h as __pageData,b as default};
