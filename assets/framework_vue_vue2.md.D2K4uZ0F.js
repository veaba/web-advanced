import{_ as i,c as a,o as l,aa as e}from"./chunks/framework.qnqjiyko.js";const o=JSON.parse('{"title":"Vue","description":"","frontmatter":{"sidebar":"auto"},"headers":[],"relativePath":"framework/vue/vue2.md","filePath":"framework/vue/vue2.md"}'),n={name:"framework/vue/vue2.md"};function t(h,s,p,k,r,d){return l(),a("div",null,s[0]||(s[0]=[e(`<h1 id="vue" tabindex="-1">Vue <a class="header-anchor" href="#vue" aria-label="Permalink to &quot;Vue&quot;">​</a></h1><ul><li><a href="/framework/vue/vue2-api.html">更多关于 VUE API 人工整理手记，见 /docs/vue-api.md @veaba</a></li></ul><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">send</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{{message}}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> app </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  el: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#app&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /*可以是class？*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  data: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello world!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;change something ha?&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="疑问点" tabindex="-1">疑问点 <a class="header-anchor" href="#疑问点" aria-label="Permalink to &quot;疑问点&quot;">​</a></h2><ul><li>vue 里面的打补丁扮演何种角色？</li><li>vue 如何处理定时器或者销毁定时器的？ <blockquote><p>在 <code>beforeDestroy</code> 里面处理</p></blockquote></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      second: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      timer: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  mounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.timer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.second </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">backPre</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      else</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.second</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  beforeDestroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    clearInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.timer);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    backPre</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Do you want what me to do,ha?&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="vue-基础知识" tabindex="-1">vue 基础知识 <a class="header-anchor" href="#vue-基础知识" aria-label="Permalink to &quot;vue 基础知识&quot;">​</a></h2><table tabindex="0"><thead><tr><th>英文</th><th>建议翻译</th></tr></thead><tbody><tr><td>observe/observer</td><td>侦听/侦听器</td></tr><tr><td>watch/watcher</td><td>侦听/侦听器</td></tr><tr><td>subs</td><td>订阅</td></tr><tr><td>patch</td><td>打补丁？</td></tr><tr><td>deps</td><td>依赖关系</td></tr></tbody></table><ul><li><p>Vue 响应式原理分析</p><ul><li>核心 Object.defineProperty 在一个对象上定义一个新属性，修改一个对象的现有属性，并返回这个对象。<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noreferrer">mdn 了解 defineProperty</a><ul><li>语法</li></ul></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@obj</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 要定义属性的对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@prop</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 要定义或修改的属性的名称</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@descriptor</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 定义或修改的属性描述符，一个对象。核心的是get/set</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * get 给属性提供一个getter方法，访问该属性则触发getter方法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * set 给属性提供一个setter方法，当对属性修改时触发setter方法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, prop, descriptor);</span></span></code></pre></div><ul><li><p>一旦对象拥有了 getter 和 setter，可以认为这个对象是响应式对象</p></li><li><p>vue 把什么对象变成响应式对象？</p><ul><li>initState。初始化就是 props、data 变成响应式对象 <ul><li>_init 方法执行时候，会执行 initState(vm) 方法，定义在 src/core/instance/state.js</li><li>initProps</li><li>initMethods</li><li>initData</li><li>initComputed</li><li>initWatch</li></ul></li></ul></li><li><p>proxy 代理</p><ul><li>作用时将 props 和 data 上的属性都代理到 vm 实例上。</li></ul></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> comP </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  props: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    msg: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    say</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       *@desc  say函数通过this.msg访问到定义在props上的msg，这个过程就发生在proxy</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.msg);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sharePropertyDefinition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  enumerable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  configurable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  get: noop,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  set: noop,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *@desc proxy函数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *@desc 通过Object.defineProperty 把target[sourceKey][key]读写变成target[key]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sourceKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  sharePropertyDefinition.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> proxyGetter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[sourceKey][key];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  sharePropertyDefinition.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> proxySetter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[sourceKey][key] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> val;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target, key, sharePropertyDefinition);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><p>observe</p><ul><li>监测数据的变化，定义在 src/core/observer/index.js</li><li>给非 vnode 对象类型数据添加一个 Observer，添加或已有返回，否则满足一定情况下，实例化一个？Observer 对象实例</li></ul></li><li><p>getter：依赖收集</p><ul><li>const dep = new Dep() 实例化一个 Deo 的的实例</li><li>通过 dep.depend 收集依赖</li><li>Dep 整个 getter 依赖收集的核心</li><li>依赖收集的目的是当这些响应式数据发送变化时，触发他们的 setter 的时候，能够知道通知哪些订阅者去做响应的逻辑处理，这过程叫派发更新。</li></ul></li><li><p>setter：派发更新。收集的目的是为了修改数据时候，对相关的依赖派发更新</p><ul><li>如果 shallow 为 false 对新设置的值变化成一个响应式对象</li><li>dep.notify() 通知所有订阅者。 <ul><li>遍历所有订阅者 subs，也就是 watcher 的实例数组，然后调用 watcher 的 update 方法</li><li>queueWatcher 放在 nextTick 队列，等待 flushSchedulerQueue <ul><li>flushSchedulerQueue 队列排序。 <ul><li>先父到子</li><li>用户 watcher 优先 render watcher</li><li>执行期间被销毁则跳过</li></ul></li><li>flushSchedulerQueue 队列遍历 <ul><li>watcher.run() 每次都是 queue.length 求值。 <ul><li>this.getAndInvoke 方法，并传入 watcher 的回调函数。</li></ul></li></ul></li><li>状态恢复。 <ul><li>resetSchedulerState 函数。 <ul><li>变量恢复到初始值，清空 watcher 队列</li></ul></li></ul></li></ul></li></ul></li></ul></li><li><p>Dep</p><ul><li>一个依赖就是一个 watcher</li><li>是一个 class，有一个 target 静态属性，全局唯一 Watcher，被认为是一个巧妙的设计，保证同一时间只有一个全局的 watcher 被计算。另外自身属性 subs 也是 watcher 的数组。 <ul><li>Dep 是 watcher 的一种管理，脱离 watcher 单独存在没有意义</li><li>触发 getter 时候，会调用 dep.depend() 方法，也会执行 Dep.target.addDep(this)</li><li>Dep.target 已经被赋值为渲染 watcher，会执行 addDep 方法，保证同一数据不会被添加多次。执行 dep.addSub(this)，执行 this.subs.push(sub)。把 watcher 订阅到这个数据持有的 dep 的 subs 中，为后续数据变化时候能通知到哪些 subs 做准备</li><li>完成依赖收集之后，再递归访问 value，触发所有子项的 getter—— popTarget()</li><li>Dep.target=targetStack.pop() 返回成上一个状态，因为当前 vm 的数据依赖收集已完成。对应的 Dep.target 也需要改变，最后执行 this.cleanUpDeps()</li><li>this.cleanUpDeps() <ul><li>变量 deps，移除对 dep 的订阅。交换 newDepIds 和 depIds，newDeps 和 deps，并把 newDepIds 和 newDeps 清空</li></ul></li></ul></li></ul></li><li><p>defineReactive 方法</p><ul><li>定义一个响应式对象，给对象添加 getter/setter，src/core/observer/index 中</li><li>初始化 Dep 对象实例</li><li>对子对象递归调用 observe 方法，保证无论访问多少层的属性都能触发 getter/setter</li><li>最后利用 Object.defineProperty 方法对 obj 属性的 key 添加 getter/setter</li></ul></li><li><p>Observer 通过 Object.defineProperty 实现对属性变化的监听。</p><ul><li>是一个类</li><li>作用是，给对象的属性添加一个 getter、setter，用于依赖收集和派发更新</li><li>构造函数逻辑：实例化 Dep 对象</li><li>为对象添加一个 <strong>ob</strong> 属性，调用 def (封装的 Object.defineProperty)</li><li>对 value 判断 <ul><li>是数。调用 observeArray 方法——先遍历数组再调用 observe 方法</li><li>是纯对象。调用 walk 方法——先 遍历对象，再调用 defineReactive 方法</li></ul></li></ul></li><li><p>Watcher 订阅者。observe 和 compile 之间，负责将变化的数据更新到视图</p><ul><li>是一个 class。</li><li>this.deps Watcher 实例持有 Dep 实例的数组</li><li>this.newDeps Watcher 实例持有 Dep 实例的数组</li><li>this.desIds —— this.deps id Set 结构</li><li>this.newDepIds —— this.newDeps id Set 结构</li><li>至于为什么有两个实例数组？</li></ul></li></ul></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.deps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.newDeps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.depIds </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.newDepIds </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><ul><li><p>生命周期，选项？？？这个在 Vue 构造器的传参中何种方式？</p><ul><li>beforeCreate 实例初始化后 data observer 和 event/watcher 事件配置之前被调用</li><li>created 实例创建完成被立即调用 (data observe，属性和方法的运损，watch/event 事件回调)，此时 <code>挂载</code> 还没有开始，<code>$el</code> 目前不可见。当然此时也是可以通过 nextTick() 来取到 document 的</li><li>beforeMount 挂载之前被调用，render 函数首次被调用，该钩子在服务端渲染器件不被调用</li><li>mounted <code>el</code> 被新创建的 <code>vm.$el</code> 替换，并挂载到实例上调用，无法确保所有子组件都一起挂载。ssr 不被调用。希望等到整个视图都渲染完毕，可以：</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  mounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$nextTick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      //拉拉</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><ul><li>beforeUpdate 数据更新时，发生在爱 DOM <code>打补丁</code> 之前，适合更新之前访问现有的 DOM，如手动移除已添加的事件监听器。SSR 渲染期间不可用</li><li>updated 数据更新导致虚拟 DOM 重新渲染和 <code>打补丁</code>，DOM 已更新，无法确保所有子组件全都一起被重绘。SSR 渲染器件不可用。可以这样做：</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  updated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$nextTick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // do something</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><ul><li>activated keep-alive 组件激活时被调用，SSR 渲染期间不可用</li><li>deactivated keep-alive 组件停用时调用，SSR 渲染期间不可用</li><li>beforeDestroy 实例销毁之前调用，在这一步实例依然完全可以用，SSR 渲染期间不可用</li><li>destroyed 实例销毁后被调用，调用后实例指示所有东西解绑，所有事件移除，子实例也被销毁，SSR 渲染期间不可用</li><li>errorCaptured 当捕获一个来自子孙组件的错误时被调用，(errorObj、发生错误组件实例、一个错误来源信息的字符串)，可以返回 false 阻止该错误向上传播</li></ul></li><li><p>组件通信</p><ul><li><p>父传子</p><ul><li>$props</li></ul></li><li><p>子传父</p><ul><li>$emit</li></ul></li></ul></li><li><p>api</p></li></ul><h2 id="api" tabindex="-1">api <a class="header-anchor" href="#api" aria-label="Permalink to &quot;api&quot;">​</a></h2><ul><li>el 可以是 css 选择器，可以是 HTMLElement 实例</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><a href="http://www.w3school.com.cn/xmldom/dom_htmlelement.asp" target="_blank" rel="noreferrer">HTMLElement 实例是什么？</a></p></div><ul><li>全局</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Vue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //config、全局配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  config: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    silent: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//boolean 取消vue所有的日志的警告</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    optionMergeStrategies: { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {} }, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//{[key:string]:Function}//自定义合并策略的选项</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    devtools: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//生产false,允许vue-devtools检查代码</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    errorHandle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">vm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//默认undefined，</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    warnHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">vm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">trace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//警告处理函数，开发环境下生效</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ignoredElements: [], </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Array&lt;string|RegExp&gt; 忽略vue之外定义的元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    keyCodes: {}, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//{ [key: string]: number | Array&lt;number&gt; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    performance: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true浏览器开发者工具性能跟踪</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    productionTip: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//false 阻止vue启动时生成生产提示</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //extend</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  extend: {}, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//使用vue构造器创建一个子类，拓展构造器！！！</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // nextTick</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {},</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // set</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  set: { target, key, value }, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//确保响应式更新</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  delete: { target, key }, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//避免被删除无法触发更新，但尽量少用它</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  directive: (id, [definition]), </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//指令</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  filter: (id, [definition]), </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//注册或获取全局过滤器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  component: (id, [definition]), </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//注册或获取全局组件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  use: object </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Function, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//安装vue 插件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mixin: { Object }, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//混入</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  compile: { string }, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//template 编译字符</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  version: string, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//版本号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="vue-cli-3-0" tabindex="-1">vue-cli 3.0 <a class="header-anchor" href="#vue-cli-3-0" aria-label="Permalink to &quot;vue-cli 3.0&quot;">​</a></h2><ul><li>则选择 typescript+vue 的开始模式</li><li>也支持预装</li></ul><h3 id="开发者注意以下问题" tabindex="-1">开发者注意以下问题 <a class="header-anchor" href="#开发者注意以下问题" aria-label="Permalink to &quot;开发者注意以下问题&quot;">​</a></h3><ul><li>product 环境下，关闭 sourceMap</li><li>product 环境下，尽量关闭 console</li><li>配置 devServer</li><li>多页应用，会导致页面重复大一倍</li></ul><h2 id="vue-router-路由" tabindex="-1">vue-router 路由 <a class="header-anchor" href="#vue-router-路由" aria-label="Permalink to &quot;vue-router 路由&quot;">​</a></h2><ul><li>vue router 懒加载</li><li>vue 路由的几种模式，history 和 hash 的原理是什么？</li></ul><h2 id="vue-相关面试题" tabindex="-1">vue 相关面试题 <a class="header-anchor" href="#vue-相关面试题" aria-label="Permalink to &quot;vue 相关面试题&quot;">​</a></h2><ul><li><p>为什么 vue 的 data 是一个函数？</p><ul><li>由于 js 语法特性决定来使用一个函数赋值。</li></ul></li></ul><h2 id="基于-vue-cli-3-0-demo-项目框架" tabindex="-1">基于 vue-cli 3.0 demo 项目框架 <a class="header-anchor" href="#基于-vue-cli-3-0-demo-项目框架" aria-label="Permalink to &quot;基于 vue-cli 3.0 demo 项目框架&quot;">​</a></h2><h2 id="vue-源码学习" tabindex="-1">vue 源码学习 <a class="header-anchor" href="#vue-源码学习" aria-label="Permalink to &quot;vue 源码学习&quot;">​</a></h2><ul><li><a href="http://jiongks.name/blog/vue-code-review/" target="_blank" rel="noreferrer">勾三股四 Vue.js 源码学习笔记</a></li><li><a href="http://hcysun.me/2017/03/03/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/" target="_blank" rel="noreferrer">HcySunYang Vue2.1.7 源码学习</a></li><li><a href="http://hcysun.me/vue-design/" target="_blank" rel="noreferrer">Vue 技术内幕-HcySunYang</a></li><li><a href="https://ustbhuangyi.github.io/vue-analysis/" target="_blank" rel="noreferrer">Vue.js 技术揭秘-ustbhuangyi</a></li></ul><h3 id="vue3-0-先占坑" tabindex="-1">vue3.0 <code>先占坑</code> <a class="header-anchor" href="#vue3-0-先占坑" aria-label="Permalink to &quot;vue3.0 \`先占坑\`&quot;">​</a></h3><blockquote><p><a href="https://www.bilibili.com/video/av36787459/" target="_blank" rel="noreferrer">https://www.bilibili.com/video/av36787459/</a> vue-v2.5.16.js 3.0 最新进展，来自 Vue Conf 杭州</p></blockquote><h4 id="模板编译、virtual-dom-runtime-性能" tabindex="-1">模板编译、Virtual Dom runtime 性能 <a class="header-anchor" href="#模板编译、virtual-dom-runtime-性能" aria-label="Permalink to &quot;模板编译、Virtual Dom runtime 性能&quot;">​</a></h4><ul><li>Virtual DOM 实现 <code>完全重构，100%，减少运行时开销（潜在），编译时来提供性能</code><ul><li>重构原生 HTML 标签的判断逻辑，编译时，判断标签，在运行时生成响应的标签或组件</li><li>生成虚拟 Node，保持 “形状一致”，同样个数的参数，利于 JavaScript 引擎优化</li><li>运行时留下 Hint，静态分析元素包含的子元素类型，以便跳过不必要分支判断</li></ul></li><li>优化 Slots 生成 <ul><li>拆分父组件和子组件的耦合关系，引入生成函数，scope、slot 统一称为一个函数，由子组件决定是否调用函数，并把传入的内容分配给子组件来完成收集，避免不要的组件渲染</li><li>真正依赖某个数据的组件，才会可能重新渲染，不存在手动优化组件过度重绘问题</li></ul></li><li>静态内容提取 <ul><li>检测到一部分模板不会变，直接提取，在之后更新中，直接复用 Virtual dom，甚至可以在比对过程跳过整个树</li><li>包含深度动态内容时，如果元素所有的属性都是静态的，提取属性对象，比对元素时，发现 data 都一样，便可跳过，去比对 children 即可</li></ul></li><li>内联事件函数提取 <code>&lt;Com @event=&quot;count++&quot;&gt;</code><ul><li>重新渲染时会生成新函数，Cache 后，以便重用，避免子组件无谓更新的效果</li></ul></li></ul><h4 id="数据监听系统" tabindex="-1">数据监听系统 <a class="header-anchor" href="#数据监听系统" aria-label="Permalink to &quot;数据监听系统&quot;">​</a></h4><ul><li>把 Object.defineProperty 改为 proxy</li><li>全语言特性支持 <ul><li>新属性增加</li><li>属性的删除</li><li>数组 index</li><li>数组 length 的修改</li><li>Map</li><li>Set</li><li>WeakMap</li><li>WeakSet</li><li>大规模数据帧听性能提升</li></ul></li><li>利用 proxy 内部判断，减少组件实例初始化开销</li><li>实测，内存减半，性能提升 100%</li></ul><h4 id="减少-runtime-体积-目测测试-10kb-左右" tabindex="-1">减少 runtime 体积，目测测试 10kb 左右 <a class="header-anchor" href="#减少-runtime-体积-目测测试-10kb-左右" aria-label="Permalink to &quot;减少 runtime 体积，目测测试 10kb 左右&quot;">​</a></h4><ul><li>tree-shaking 代码结构，按需引入 import <ul><li>内置组件 <ul><li>keep-alive</li><li>transition</li></ul></li><li>指令运行时 <ul><li>v-model</li><li>v-for</li></ul></li><li>工具函数 <ul><li>async component</li><li>mixins</li><li>memoize<code>new 新的工具函数</code></li></ul></li></ul></li></ul><h4 id="更易维护" tabindex="-1">更易维护 <a class="header-anchor" href="#更易维护" aria-label="Permalink to &quot;更易维护&quot;">​</a></h4><ul><li>flow 迁移 typeScript <ul><li>降低源码阅读能力，引入了类型信息</li><li>内部模块解耦，如独立 observer</li><li>让更多的开发者参与进来</li></ul></li><li>编译器重构 <ul><li>插件化设计</li><li>带位置信息的 parser (source maps)</li><li>铺路 IDE 工具链，如 vetur 作者作为 vscode 团队成员参与 vue 3.0 的开发</li></ul></li></ul><h4 id="多端渲染支持" tabindex="-1">多端渲染支持 <a class="header-anchor" href="#多端渲染支持" aria-label="Permalink to &quot;多端渲染支持&quot;">​</a></h4><ul><li>场景 <ul><li><code>vue native</code></li><li><code>weex</code></li><li><code>mpvue</code> 小程序</li></ul></li><li>vue 作为 runtime 编译到多端 <ul><li>独立出真正的 customer render API，在 <code>import {createRenderer} from &#39;@vue/runtime-core&#39;</code>，平台无关 vue runtime</li><li>vue 组件和 Virtual Dom 直接渲染到元素的对象上去</li></ul></li></ul><h4 id="响应式数据监听-api" tabindex="-1">响应式数据监听 API <a class="header-anchor" href="#响应式数据监听-api" aria-label="Permalink to &quot;响应式数据监听 API&quot;">​</a></h4><ul><li>实现跨组件的状态共享</li><li>排查组件更新的触发原因 <ul><li>提供新的 renderTriggered API</li></ul></li></ul><h4 id="更好的-typescript-支持以及原生的-class-api-和-tsx" tabindex="-1">更好的 typeScript 支持以及原生的 Class API 和 TSX <a class="header-anchor" href="#更好的-typescript-支持以及原生的-class-api-和-tsx" aria-label="Permalink to &quot;更好的 typeScript 支持以及原生的 Class API 和 TSX&quot;">​</a></h4><ul><li>甚至不需要 babel</li></ul><h4 id="更好的警告信息" tabindex="-1">更好的警告信息 <a class="header-anchor" href="#更好的警告信息" aria-label="Permalink to &quot;更好的警告信息&quot;">​</a></h4><ul><li>组件堆栈包含函数式组件</li><li>可以在警告信息中查看组建的 props</li><li>在更新的警告中提供组件堆栈信息</li></ul><h4 id="experimental-hooks-api-逻辑重用机制-可能取代-mixins" tabindex="-1">Experimental Hooks API，逻辑重用机制，可能取代 mixins <a class="header-anchor" href="#experimental-hooks-api-逻辑重用机制-可能取代-mixins" aria-label="Permalink to &quot;Experimental Hooks API，逻辑重用机制，可能取代 mixins&quot;">​</a></h4><ul><li>Hooks 替代 mixins</li><li>Time Slicing Support 切割 JavaScript 计算，一帧一帧去处理，预留每 16ms yield 给浏览器让用户事件重新进来，允许中间有机会让用户添加进事件</li></ul><h4 id="关于-ie" tabindex="-1">关于 IE <a class="header-anchor" href="#关于-ie" aria-label="Permalink to &quot;关于 IE&quot;">​</a></h4><ul><li>IE11 自动降级为旧的 getter/setter 机制</li><li>并引入增加不支持 IE 的语法警告</li></ul><h3 id="启动" tabindex="-1">启动 <a class="header-anchor" href="#启动" aria-label="Permalink to &quot;启动&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> karma</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (运行时test </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">是基于</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Karma</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 的</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mime-db</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (安装依赖)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev:test</span></span></code></pre></div><h3 id="源码项目结构" tabindex="-1">源码项目结构 <a class="header-anchor" href="#源码项目结构" aria-label="Permalink to &quot;源码项目结构&quot;">​</a></h3><p><a href="https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#development-setup" target="_blank" rel="noreferrer">vue 官方开发文档</a></p><ul><li><p><code>scripts</code> 一般不需要关注，不过熟悉以下两个文件会更好</p><ul><li><code>scripts/alias.js</code> 所有源码和测试中使用模块导入的别名</li><li><code>scripts/config.js</code> 包含生成 <code>dist/</code> 的所有文件的配置，查找入口文件，都在这个 <code>dist</code> 都在里面</li></ul></li><li><p><code>dist</code> 包含用户发布的内置文件。此目录只会在发布的时候更新，并不能说明当前开发的最新特性变化。</p><ul><li>关于 dist 的信息请查看<a href="https://github.com/vuejs/vue/blob/dev/dist/README.md" target="_blank" rel="noreferrer">更多</a></li></ul></li><li><p><code>flow</code> 包含 flow 的类型声明。全局加载的，可以在普通源码中看到他们在注释中的使用</p></li><li><p><code>packages</code> 包含 vue ssr 和 vue 模板编译包。vue 的依赖包</p></li><li><p><code>test</code> 包含所有测试。单元测试是 Jasmine 写的，运行是用 Karma。e2e 是 Nighwatch.js 编写和运行的。</p></li><li><p><code>src</code> 包含源代码。基本代码是 es2015 编写的，并用 flow 来做类型注释</p><ul><li><code>compiler</code> 编译器。包含模板转函数编译器的代码。</li><li><code>parse</code> 解析器 (将字符串模板转为抽象语法树 AST)</li><li><code>optimizer</code> 优化器 (检测用于 <code>vdom</code> 呈现优化的静态树)</li><li><code>code generator</code> 代码生成器 (将抽象语法树生成渲染函数代码)</li></ul><p>代码生成器直接从抽象语法树生成字符串，这样做的代码规格较小，因为编译器在独立构建中，发送给浏览器的</p><ul><li><code>core</code> 包含通用，无关平台运行时的代码。 <ul><li>vue2.0 开始 core 就与平台无关。这意味着，你可以运行在浏览器、nodejs、或者嵌入式 js 里面。</li><li><code>observer</code> 观察者。包含与响应式系统相关的代码。</li><li><code>vdom</code> 虚拟 dom。包含虚拟 dom 创建元素的相关代码和补丁。</li><li><code>instance</code> 实例。包含 Vue 实例构造函数和原型对象 (prototype) 方法。</li><li><code>global-api</code> 顾名思义，就是全局的 api</li><li><code>components</code> 通过抽象组件，目前 keep-alive 是唯一的一个。</li></ul></li><li><code>server</code> 包含 ssr (服务端渲染 server-side rendering) 相关代码</li><li><code>platforms</code> 包含特定平台的代码。</li></ul><p>来自 <code>dist/build</code> 的入口文件位于各自平台的目录中。 每个平台模块包含三个部分：编译器 compiler、运行时 runtime、服务器 server。对应上面的三个目录，每个部分都包含特定的平台的模块/实用程序，然后导出并注入到平台特定的目录文件中的 core 项中。例如，实现 v-bind:class 背后的逻辑的核心就是在 <code>platforms/web/runtime/modules/class.js</code> ——这个入口是在 <code>entries/web-runtime.js</code>，用于创建特定浏览器的 vdom 的修补功能。</p><ul><li><code>sfc</code> 包含单文件组件 (*.vue) 解析逻辑。用到 package 中的 vue-template-compiler 依赖包。</li><li>包含整个代码库中共享的实用程序。</li></ul></li></ul>`,55)]))}const c=i(n,[["render",t]]);export{o as __pageData,c as default};
