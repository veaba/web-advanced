import{_ as s,c as a,o as e,aa as t}from"./chunks/framework.qnqjiyko.js";const c=JSON.parse('{"title":"CSRF","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/security/csrf.md","filePath":"frontend/security/csrf.md"}'),l={name:"frontend/security/csrf.md"};function h(o,i,n,k,p,d){return e(),a("div",null,i[0]||(i[0]=[t('<h1 id="csrf" tabindex="-1">CSRF <a class="header-anchor" href="#csrf" aria-label="Permalink to &quot;CSRF&quot;">​</a></h1><p>Cross site request forgery (跨站请求伪造)。</p><p>例如，登录微博账号后，copy 某个 xhr 请求的 <code>curl</code>，丢到控制台或是复制所有 cookie 之类的数据丢到 <code>Postman</code> 中，这就是跨站请求伪造 (<code>CSRF</code>)。</p><p>第三方引导发出的 <code>cookie</code>，称为第三方 <code>cookie</code>，可用于 <code>CSRF</code> 攻击，还可以用于用户追踪等营销行为</p><h2 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h2><ol><li>facebook 在第三方网站插入一张看不见的图片</li></ol><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;facebook.com&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;visibility:hidden&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><p>这时候访问这个图片，就会带上 cookie，facebook 知道你的 <code>ip</code> 等等数据</p><h2 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-label="Permalink to &quot;原理&quot;">​</a></h2><p>大多数情况下，被第三方网站或者 <code>js</code> 脚本获取到 <code>cookie</code>，所以防御的手段之一就是防止 <code>cookie</code> 被获取。</p><h2 id="防御" tabindex="-1">防御 <a class="header-anchor" href="#防御" aria-label="Permalink to &quot;防御&quot;">​</a></h2><h3 id="敏感信息都是用-post" tabindex="-1">敏感信息都是用 <code>POST</code> <a class="header-anchor" href="#敏感信息都是用-post" aria-label="Permalink to &quot;敏感信息都是用 `POST`&quot;">​</a></h3><ul><li>就算是 copy 参数也很多，步骤比 get 还多</li><li>如果网站存在 <code>xss</code> 漏洞，都很费劲</li></ul><p>比如构造一个 <code>from</code> 表单</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/api/&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forms</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">submit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>在 console 执行 script 部分代码，如果有 from，会直接跳到百度 (或许与 Chrome) 设置默认引擎有关系。</p><p>尝试在 firefox 中打开阮老师 blog，会网页提示：<code>留言提交失败。原因：Invalid request</code></p><h3 id="将-cookie-设置为-httponly" tabindex="-1">将 Cookie 设置为 <code>HttpOnly</code> <a class="header-anchor" href="#将-cookie-设置为-httponly" aria-label="Permalink to &quot;将 Cookie 设置为 `HttpOnly`&quot;">​</a></h3><p>对应 header 是：<code>Set-Cookie: hello=world;httponly</code></p><ul><li><code>JavaScript</code> 脚本将无法读取 <code>cookie</code> 信息</li></ul><h3 id="将-cookie-设置为-samehttp" tabindex="-1">将 Cookie 设置为 <code>SameHttp</code> <a class="header-anchor" href="#将-cookie-设置为-samehttp" aria-label="Permalink to &quot;将 Cookie 设置为 `SameHttp`&quot;">​</a></h3><h3 id="增加-token" tabindex="-1">增加 token <a class="header-anchor" href="#增加-token" aria-label="Permalink to &quot;增加 token&quot;">​</a></h3><p>原理：增加攻击者所不能伪造的信息，且不中存在于 <code>cookie</code> 中，重点是 <code>token</code> 的保密性、随机性。</p><ul><li><p>比如放在 <code>Token-Csrf: abcdef</code></p></li><li><p>token 服务端生成，有一定的有效期</p></li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>但这种方式，实际上，也躲不过直接复制信息到 <code>postman</code></p></div><h3 id="根据-referer-判断" tabindex="-1">根据 <code>referer</code> 判断 <a class="header-anchor" href="#根据-referer-判断" aria-label="Permalink to &quot;根据 `referer` 判断&quot;">​</a></h3><ul><li>用于验证发起请求是否是合法的网站</li></ul>',27)]))}const E=s(l,[["render",h]]);export{c as __pageData,E as default};
