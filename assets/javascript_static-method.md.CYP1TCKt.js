import{_ as t,c as d,o,aa as i}from"./chunks/framework.qnqjiyko.js";const a="/images/isArray.jpg",l="/images/isTypeSupported.jpg",m=JSON.parse('{"title":"静态方法","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/static-method.md","filePath":"javascript/static-method.md"}'),c={name:"javascript/static-method.md"};function r(s,e,n,h,u,b){return o(),d("div",null,e[0]||(e[0]=[i('<h1 id="静态方法" tabindex="-1">静态方法 <a class="header-anchor" href="#静态方法" aria-label="Permalink to &quot;静态方法&quot;">​</a></h1><ul><li>疑问：比较 MediaSource.prototype 与 Array.isArray()</li></ul><p>Array.isArray() <code>静态方法?</code>，可在 chrome 打印出来并不是灰色 <img src="'+a+'" alt="Array.isArray()"></p><p>MediaSource.isTypeSupported() <code>静态方法</code>，在 chrome 打印出来是亮色 <img src="'+l+'" alt="MediaSource.isTypeSupported"></p><table tabindex="0"><thead><tr><th>类型或者构造函数</th><th>arguments</th><th>caller</th><th>length</th><th>name</th><th>prototype</th><th><strong>proto</strong></th><th>[[Scopes]]</th></tr></thead><tbody><tr><td>String</td><td></td><td></td><td>1</td><td>String</td><td></td><td></td><td></td></tr><tr><td>Boolean</td><td></td><td></td><td>1</td><td>Boolean</td><td></td><td></td><td></td></tr><tr><td>Number</td><td></td><td></td><td>1</td><td>Number</td><td></td><td></td><td></td></tr><tr><td>Object</td><td></td><td></td><td>1</td><td>Object</td><td></td><td></td><td></td></tr><tr><td>Array</td><td></td><td></td><td>1</td><td>Array</td><td></td><td></td><td></td></tr><tr><td>Symbol</td><td></td><td></td><td>0</td><td>Symbol</td><td></td><td></td><td></td></tr><tr><td>MediaSources</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="string-方法" tabindex="-1">String 方法 <a class="header-anchor" href="#string-方法" aria-label="Permalink to &quot;String 方法&quot;">​</a></h2><ul><li><code>fromCharCode</code></li><li><code>raw</code></li></ul><h2 id="boolean" tabindex="-1">Boolean <a class="header-anchor" href="#boolean" aria-label="Permalink to &quot;Boolean&quot;">​</a></h2><h2 id="number" tabindex="-1">Number <a class="header-anchor" href="#number" aria-label="Permalink to &quot;Number&quot;">​</a></h2><ul><li><code>EPSILON:2.220446049250313e-16</code></li><li><code>MAX_SAFE_INTEGER: 9007199254740991</code></li><li><code>MAX_VALUE:1.7976931348623157e+308</code></li><li><code>MIN_SAFE_INTEGER: -9007199254740991</code></li><li><code>MIN_VALUE:5e-324</code></li><li><code>NEGATIVE_INFINITY: -Infinity</code></li><li><code>NaN: NaN</code></li><li><code>POSITIVE_INFINITY: Infinity</code></li><li><code>isFinite()</code></li><li><code>isInteger()</code></li><li><code>isNaN()</code></li><li><code>isSafeInteger()</code></li><li><code>parseFloat()</code></li><li><code>parseInt()</code></li></ul><h2 id="object" tabindex="-1">Object <a class="header-anchor" href="#object" aria-label="Permalink to &quot;Object&quot;">​</a></h2><ul><li><code>assign()</code></li><li><code>create()</code></li><li><code>defineProperties()</code></li><li><code>defineProperty()</code></li><li><code>entries()</code></li><li><code>freeze()</code></li><li><code>getOwnPropertyDescriptor()</code></li><li><code>getOwnPropertyDescriptors()</code></li><li><code>getOwnPropertyNames()</code></li><li><code>getOwnPropertySymbols()</code></li><li><code>getPrototypeOf()</code></li><li><code>is()</code></li><li><code>isExtensible()</code></li><li><code>isFrozen()</code></li><li><code>isSealed()</code></li><li><code>keys()</code></li><li><code>preventExtensions()</code></li><li><code>seal()</code></li><li><code>setPrototypeOf()</code></li><li><code>values()</code></li></ul><h2 id="array" tabindex="-1">Array <a class="header-anchor" href="#array" aria-label="Permalink to &quot;Array&quot;">​</a></h2><ul><li><code>from()</code></li><li><code>isArray()</code></li><li><code>of()</code></li><li><code>Symbol(Symbol.species)</code></li><li><code>get Symbol(Symbol.species):()</code></li></ul><h2 id="symbol" tabindex="-1">Symbol <a class="header-anchor" href="#symbol" aria-label="Permalink to &quot;Symbol&quot;">​</a></h2><ul><li><code>asyncIterator</code></li><li><code>for()</code></li><li><code>hadInstance</code></li><li><code>isConcatSpreadable</code></li><li><code>iterator</code></li><li><code>keyFor()</code></li><li><code>match</code></li><li><code>replace</code></li><li><code>search</code></li><li><code>species</code></li><li><code>split</code></li><li><code>toPrimitive</code></li><li><code>toStringTag</code></li><li><code>unscopables</code></li></ul><h2 id="websocket" tabindex="-1">WebSocket <a class="header-anchor" href="#websocket" aria-label="Permalink to &quot;WebSocket&quot;">​</a></h2><ul><li><code>CLOSED:3</code></li><li><code>CLOSING:2</code></li><li><code>OPEN:1</code></li><li><code>CONNECTING:0</code></li></ul><h2 id="mediasources" tabindex="-1">MediaSources <a class="header-anchor" href="#mediasources" aria-label="Permalink to &quot;MediaSources&quot;">​</a></h2><ul><li><code>isTypeSupported()</code> 静态方法</li></ul><h2 id="audio" tabindex="-1">Audio <a class="header-anchor" href="#audio" aria-label="Permalink to &quot;Audio&quot;">​</a></h2><h2 id="vidio" tabindex="-1">Vidio <a class="header-anchor" href="#vidio" aria-label="Permalink to &quot;Vidio&quot;">​</a></h2><h2 id="canvas" tabindex="-1">Canvas <a class="header-anchor" href="#canvas" aria-label="Permalink to &quot;Canvas&quot;">​</a></h2>',23)]))}const y=t(c,[["render",r]]);export{m as __pageData,y as default};
