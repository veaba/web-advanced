import{_ as s,C as n,c as o,o as l,aa as h,j as a,a as d,G as i,w as r}from"./chunks/framework.qnqjiyko.js";const x=JSON.parse('{"title":"全局函数","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/function/function-global.md","filePath":"javascript/function/function-global.md"}'),c={name:"javascript/function/function-global.md"},p={id:"escape-废弃",tabindex:"-1"},k={id:"unescape-废弃",tabindex:"-1"};function u(E,t,b,g,m,y){const e=n("Badge");return l(),o("div",null,[t[8]||(t[8]=h(`<h1 id="全局函数" tabindex="-1">全局函数 <a class="header-anchor" href="#全局函数" aria-label="Permalink to &quot;全局函数&quot;">​</a></h1><p><code>http://www.w3school.com.cn/jsref/jsref_obj_global.asp</code></p><ul><li>Global <code>ES 内置单体对象</code> 全局对象</li></ul><table tabindex="0"><thead><tr><th>属性</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td></td><td>isNaN()</td><td></td></tr><tr><td></td><td>isFinite()</td><td></td></tr><tr><td></td><td>parseInt()</td><td></td></tr><tr><td></td><td>parseFloat()</td><td></td></tr><tr><td></td><td>encodeURI()</td><td><code>对空格转换</code></td></tr><tr><td></td><td>decodeURI()</td><td></td></tr><tr><td></td><td>encodeURIComponent()</td><td><code>非标准字符全部编码</code></td></tr><tr><td></td><td>decodeURIComponent()</td><td></td></tr><tr><td></td><td>eval()</td><td></td></tr><tr><td>undefined</td><td></td><td><code>特殊值</code></td></tr><tr><td>NaN</td><td></td><td><code>not a number 特殊值</code></td></tr><tr><td>Infinity</td><td></td><td><code>特殊值</code></td></tr><tr><td>Object</td><td></td><td><code>构造函数</code></td></tr><tr><td>Array</td><td></td><td><code>构造函数</code></td></tr><tr><td>Function</td><td></td><td><code>构造函数</code></td></tr><tr><td>Boolean</td><td></td><td><code>构造函数</code></td></tr><tr><td>String</td><td></td><td><code>构造函数</code></td></tr><tr><td>Number</td><td></td><td><code>构造函数</code></td></tr><tr><td>Date</td><td></td><td><code>构造函数</code></td></tr><tr><td>RegExp</td><td></td><td><code>构造函数</code></td></tr><tr><td>Error</td><td></td><td><code>构造函数</code></td></tr><tr><td>EvalError</td><td></td><td><code>构造函数</code></td></tr><tr><td>RangeError</td><td></td><td><code>构造函数</code></td></tr><tr><td>ReferenceError</td><td></td><td><code>构造函数</code></td></tr><tr><td>SyntaxError</td><td></td><td><code>构造函数</code></td></tr><tr><td>TypeError</td><td></td><td><code>构造函数</code></td></tr><tr><td>URIError</td><td></td><td><code>构造函数</code></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><ul><li>Math <code>ES 内置单体对象</code>，比较数组大小</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11231</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">238</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">21</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math.max.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Math, arr);</span></span></code></pre></div><p>等同于：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11231</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">238</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">21</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 即</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Math.max(11231, 238, 5, 21)</span></span></code></pre></div><table tabindex="0"><thead><tr><th>属性</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>E</td><td></td><td><code>自然对数的底数，常量e的值</code></td></tr><tr><td>LN10</td><td></td><td><code>10的自然对数</code></td></tr><tr><td>LN2</td><td></td><td><code>2的自然对数</code></td></tr><tr><td>LOG2E</td><td></td><td><code>2为底的e的对数</code></td></tr><tr><td>LOG10E</td><td></td><td><code>10为底的e的对数</code></td></tr><tr><td>PI</td><td></td><td></td></tr><tr><td>SQRT1_2</td><td></td><td><code>1/2的平方根，2的平方根的倒数</code></td></tr><tr><td>SQRT2</td><td></td><td><code>2的平方根</code></td></tr><tr><td></td><td>min()</td><td><code>(1,3,9,4)</code></td></tr><tr><td></td><td>max()</td><td><code>(9,3,11)</code></td></tr><tr><td></td><td>ceil()</td><td>向上取舍</td></tr><tr><td></td><td>floor()</td><td>向下取舍</td></tr><tr><td></td><td>round()</td><td></td></tr><tr><td></td><td>random()</td><td><code>0-1随机数，技巧：Math.random()*100+1</code></td></tr><tr><td></td><td>abs(num)</td><td><code>绝对值</code></td></tr><tr><td></td><td>exp(num)</td><td><code>Math.E的num次幂</code></td></tr><tr><td></td><td>log(num)</td><td></td></tr><tr><td></td><td>pow(num,power)</td><td></td></tr><tr><td></td><td>sqrt(num)</td><td><code>num的平方根</code></td></tr><tr><td></td><td>acos(x)</td><td><code>x的反余弦值</code></td></tr><tr><td></td><td>asin(x)</td><td><code>x的反正弦值</code></td></tr><tr><td></td><td>atan()</td><td><code>x的反正切值</code></td></tr><tr><td></td><td>atan2(y,x)</td><td><code>y/x的反正切值</code></td></tr><tr><td></td><td>cos(x)</td><td><code>x的余弦值</code></td></tr><tr><td></td><td>sin(x)</td><td><code>x正弦值</code></td></tr><tr><td></td><td>tan(x)</td><td><code>x正切值</code></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="全局属性" tabindex="-1">全局属性 <a class="header-anchor" href="#全局属性" aria-label="Permalink to &quot;全局属性&quot;">​</a></h2><h3 id="infinity" tabindex="-1">Infinity <a class="header-anchor" href="#infinity" aria-label="Permalink to &quot;Infinity&quot;">​</a></h3><h3 id="nan" tabindex="-1">NaN <a class="header-anchor" href="#nan" aria-label="Permalink to &quot;NaN&quot;">​</a></h3><h3 id="undefined" tabindex="-1">undefined <a class="header-anchor" href="#undefined" aria-label="Permalink to &quot;undefined&quot;">​</a></h3><h2 id="全局方法" tabindex="-1">全局方法 <a class="header-anchor" href="#全局方法" aria-label="Permalink to &quot;全局方法&quot;">​</a></h2><h3 id="decodeurl" tabindex="-1">decodeURL() <a class="header-anchor" href="#decodeurl" aria-label="Permalink to &quot;decodeURL()&quot;">​</a></h3><h3 id="decodeurlcomponent" tabindex="-1">decodeURLComponent() <a class="header-anchor" href="#decodeurlcomponent" aria-label="Permalink to &quot;decodeURLComponent()&quot;">​</a></h3><h3 id="encodeurl" tabindex="-1">encodeURL() <a class="header-anchor" href="#encodeurl" aria-label="Permalink to &quot;encodeURL()&quot;">​</a></h3><h3 id="encodeurlcomponent" tabindex="-1">encodeURLComponent() <a class="header-anchor" href="#encodeurlcomponent" aria-label="Permalink to &quot;encodeURLComponent()&quot;">​</a></h3><h3 id="eval" tabindex="-1">eval() <a class="header-anchor" href="#eval" aria-label="Permalink to &quot;eval()&quot;">​</a></h3><h3 id="isfinite" tabindex="-1">isFinite() <a class="header-anchor" href="#isfinite" aria-label="Permalink to &quot;isFinite()&quot;">​</a></h3><h3 id="isnan" tabindex="-1">isNaN() <a class="header-anchor" href="#isnan" aria-label="Permalink to &quot;isNaN()&quot;">​</a></h3><h3 id="number" tabindex="-1">Number() <a class="header-anchor" href="#number" aria-label="Permalink to &quot;Number()&quot;">​</a></h3><h3 id="parsefloat" tabindex="-1">parseFloat() <a class="header-anchor" href="#parsefloat" aria-label="Permalink to &quot;parseFloat()&quot;">​</a></h3><h3 id="string" tabindex="-1">String() <a class="header-anchor" href="#string" aria-label="Permalink to &quot;String()&quot;">​</a></h3>`,24)),a("h3",p,[t[1]||(t[1]=d("escape() ")),i(e,{type:"danger"},{default:r(()=>t[0]||(t[0]=[d("废弃")])),_:1,__:[0]}),t[2]||(t[2]=d()),t[3]||(t[3]=a("a",{class:"header-anchor",href:"#escape-废弃","aria-label":'Permalink to "escape() <Badge type="danger">废弃</Badge>"'},"​",-1))]),a("h3",k,[t[5]||(t[5]=d("unescape() ")),i(e,{type:"danger"},{default:r(()=>t[4]||(t[4]=[d("废弃")])),_:1,__:[4]}),t[6]||(t[6]=d()),t[7]||(t[7]=a("a",{class:"header-anchor",href:"#unescape-废弃","aria-label":'Permalink to "unescape() <Badge type="danger">废弃</Badge>"'},"​",-1))])])}const C=s(c,[["render",u]]);export{x as __pageData,C as default};
