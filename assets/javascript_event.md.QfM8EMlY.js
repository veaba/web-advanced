import{_ as s,c as i,o as a,aa as d}from"./chunks/framework.qnqjiyko.js";const o=JSON.parse('{"title":"事件","description":"","frontmatter":{"sidebar":"auto"},"headers":[],"relativePath":"javascript/event.md","filePath":"javascript/event.md"}'),n={name:"javascript/event.md"};function h(l,t,e,k,p,r){return a(),i("div",null,t[0]||(t[0]=[d(`<h1 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h1><blockquote><p><a href="http://www.runoob.com/jsref/dom-obj-event.html" target="_blank" rel="noreferrer">http://www.runoob.com/jsref/dom-obj-event.html</a></p></blockquote><h2 id="事件的传播" tabindex="-1">事件的传播 <a class="header-anchor" href="#事件的传播" aria-label="Permalink to &quot;事件的传播&quot;">​</a></h2><ul><li>第一阶段。从 window 对象传导到目标节点 (上层传递到下层)，捕获阶段 capture</li><li>第二阶段。在目标节点触发，目标阶段 target</li><li>第三阶段。目标节点传导回 window 对象 (底层传回下层)，冒泡阶段 bubbling</li></ul><h2 id="事件代理" tabindex="-1">事件代理 <a class="header-anchor" href="#事件代理" aria-label="Permalink to &quot;事件代理&quot;">​</a></h2><ul><li>事件在冒泡阶段，始终会传导到父级别，所以，在父级别定义监听函数即可。此行为叫事件的代理</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ul</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ul&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ul.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (event.target.tagName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toLowerCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;li&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;这就是li&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><ul><li>如需要以上代码不需要传播到 window，则可以使用 stopPropagation 方法阻止传播 <ul><li>stopPropagation 方法，阻止继续向下传播</li><li>事件冒泡到 p，不再继续向上冒泡</li></ul></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (event.target.tagName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toLowerCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;li&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;这就是li&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      event.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stopPropagation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="鼠标" tabindex="-1">鼠标 <a class="header-anchor" href="#鼠标" aria-label="Permalink to &quot;鼠标&quot;">​</a></h2><table tabindex="0"><thead><tr><th>事件</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td><code>onclick</code></td><td></td><td><code>document.body.onclick=function(){}</code></td></tr><tr><td>oncontextmenu</td><td>对内容右键，firefox 支持 contentmenu</td><td></td></tr><tr><td>onmousedown</td><td></td><td></td></tr><tr><td>onmouseenter</td><td></td><td></td></tr><tr><td>onmouseleave</td><td></td><td></td></tr><tr><td>onmousemove</td><td></td><td></td></tr><tr><td>onmouseout</td><td></td><td></td></tr><tr><td>onmouseup</td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="键盘" tabindex="-1">键盘 <a class="header-anchor" href="#键盘" aria-label="Permalink to &quot;键盘&quot;">​</a></h2><table tabindex="0"><thead><tr><th>事件</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td>onkeydown</td><td></td><td></td></tr><tr><td>onkeypress</td><td></td><td></td></tr><tr><td>onkeyup</td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="框架-对象事件" tabindex="-1">框架/对象事件 <a class="header-anchor" href="#框架-对象事件" aria-label="Permalink to &quot;框架/对象事件&quot;">​</a></h2><table tabindex="0"><thead><tr><th>事件</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td>onabort</td><td></td><td></td></tr><tr><td><code>onbeforeload</code></td><td></td><td></td></tr><tr><td><code>onerror</code></td><td>图片 src 加载错误，常用</td><td></td></tr><tr><td>onhashchange</td><td></td><td></td></tr><tr><td><code>onload</code></td><td></td><td></td></tr><tr><td>onpageshow</td><td>一打开页面就出现，一般在 body</td><td></td></tr><tr><td>onpagehide</td><td>用户离开网页时触发</td><td></td></tr><tr><td>onresize</td><td></td><td></td></tr><tr><td>onscroll</td><td></td><td></td></tr><tr><td>onunload</td><td>body frameset</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="表单事件" tabindex="-1">表单事件 <a class="header-anchor" href="#表单事件" aria-label="Permalink to &quot;表单事件&quot;">​</a></h2><table tabindex="0"><thead><tr><th>事件</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td>onblur</td><td></td><td></td></tr><tr><td>onchange</td><td></td><td></td></tr><tr><td>onfocus</td><td></td><td></td></tr><tr><td>onfocusin</td><td></td><td></td></tr><tr><td>onfocusout</td><td></td><td></td></tr><tr><td>oninput</td><td></td><td></td></tr><tr><td>onreset</td><td></td><td></td></tr><tr><td>onsearch</td><td>input=&quot;search&quot;</td><td></td></tr><tr><td>onselect</td><td>选取文档</td><td></td></tr><tr><td>onsubmit</td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="剪切板" tabindex="-1">剪切板 <a class="header-anchor" href="#剪切板" aria-label="Permalink to &quot;剪切板&quot;">​</a></h2><table tabindex="0"><thead><tr><th>事件</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td>oncopy</td><td></td><td></td></tr><tr><td>oncut</td><td></td><td></td></tr><tr><td>onpaste</td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="打印事件" tabindex="-1">打印事件 <a class="header-anchor" href="#打印事件" aria-label="Permalink to &quot;打印事件&quot;">​</a></h3><table tabindex="0"><thead><tr><th>属性</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td>onafterprint</td><td></td><td></td></tr><tr><td>obbeforeprint</td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="拖动事件" tabindex="-1">拖动事件 <a class="header-anchor" href="#拖动事件" aria-label="Permalink to &quot;拖动事件&quot;">​</a></h2><table tabindex="0"><thead><tr><th>事件</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td>ondrag</td><td></td><td></td></tr><tr><td>ondraged</td><td></td><td></td></tr><tr><td>ondragenter</td><td></td><td></td></tr><tr><td>ondragleave</td><td></td><td></td></tr><tr><td>ondragover</td><td></td><td></td></tr><tr><td>ondragstart</td><td></td><td></td></tr><tr><td>ondrop</td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="多媒体-media-事件" tabindex="-1">多媒体 (Media) 事件 <a class="header-anchor" href="#多媒体-media-事件" aria-label="Permalink to &quot;多媒体 (Media) 事件&quot;">​</a></h2><table tabindex="0"><thead><tr><th>事件</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td>onabort</td><td></td><td></td></tr><tr><td>oncanplay</td><td></td><td></td></tr><tr><td>oncanplaythrough</td><td></td><td></td></tr><tr><td>ondurationchange</td><td></td><td></td></tr><tr><td>onemptied</td><td></td><td></td></tr><tr><td>onended</td><td></td><td></td></tr><tr><td>onerror</td><td></td><td></td></tr><tr><td>onloadeddata</td><td></td><td></td></tr><tr><td>onloadedmetadata</td><td></td><td></td></tr><tr><td>onloadstart</td><td></td><td></td></tr><tr><td>onpause</td><td></td><td></td></tr><tr><td>onplay</td><td></td><td></td></tr><tr><td>onplaying</td><td></td><td></td></tr><tr><td>onprogress</td><td></td><td></td></tr><tr><td>onratechange</td><td></td><td></td></tr><tr><td>onseeked</td><td></td><td></td></tr><tr><td>onstalled</td><td></td><td></td></tr><tr><td>onsuspend</td><td></td><td></td></tr><tr><td>ontimeupdate</td><td></td><td></td></tr><tr><td>onvolumechange</td><td></td><td></td></tr><tr><td>onwaiting</td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="动画事件" tabindex="-1">动画事件 <a class="header-anchor" href="#动画事件" aria-label="Permalink to &quot;动画事件&quot;">​</a></h2><table tabindex="0"><thead><tr><th>事件</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td>animationed</td><td></td><td></td></tr><tr><td>animationteration</td><td>重复播放</td><td></td></tr><tr><td>animationstart</td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="过渡事件" tabindex="-1">过渡事件 <a class="header-anchor" href="#过渡事件" aria-label="Permalink to &quot;过渡事件&quot;">​</a></h2><table tabindex="0"><thead><tr><th>事件</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td>transitionend</td><td></td><td>css 过渡后触发</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="其他事件" tabindex="-1">其他事件 <a class="header-anchor" href="#其他事件" aria-label="Permalink to &quot;其他事件&quot;">​</a></h2><table tabindex="0"><thead><tr><th>事件</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td>onmeesage</td><td>websocket、 web worker、 event source 、frame</td><td></td></tr><tr><td>onmousewheel-&gt;onwheel</td><td></td><td></td></tr><tr><td>ononline</td><td></td><td></td></tr><tr><td>onoffine</td><td></td><td></td></tr><tr><td>onpopstate</td><td></td><td></td></tr><tr><td>onshow</td><td></td><td></td></tr><tr><td>onstorage</td><td></td><td></td></tr><tr><td>ontoggle</td><td><code>&lt;details&gt;</code></td><td></td></tr><tr><td>onwheel</td><td>滚轮</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="事件对象" tabindex="-1">事件对象 <a class="header-anchor" href="#事件对象" aria-label="Permalink to &quot;事件对象&quot;">​</a></h2><p>| 属性 | 方法 | 静态变量 | 描述 | 例子 | | ------------- | ----------------- | --------------- | ---------------------------------- | ---- | --- | | | | CAPTURING-PHASE | 当前事件阶段为——捕获阶段 | | | | | AT-TARGET | 当前事件时目标阶段，在评估目标事件 | | | | | BUBBLING-PHASE | 当前的事件为——冒泡阶段 | | | bubbles | | | | | | cancelable | | | | | | currentTarget | | | | | | eventPhase | | | | | | target | | | | | | timeStamp | | | | | | type | | | | | | | initEvent() | | | | | | <code>prevenDefault()</code> | | | | | | <code>stopPropation()</code> | | | | | | | | | | |</p><h2 id="目标事件对象" tabindex="-1">目标事件对象 <a class="header-anchor" href="#目标事件对象" aria-label="Permalink to &quot;目标事件对象&quot;">​</a></h2><table tabindex="0"><thead><tr><th>属性</th><th>方法</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td></td><td><code>addEventListener()</code></td><td>允许在目标事件中监听事件（IE8=attachEvent()）</td><td></td></tr><tr><td></td><td>dispatchEvent()</td><td>发送事件到监听器(IE8=fireEvent())</td><td></td></tr><tr><td></td><td>removeEventListener()</td><td>运行一次注册在事件目标上的监听事件（IE8=detachEvent()）</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="事件监听对象" tabindex="-1">事件监听对象 <a class="header-anchor" href="#事件监听对象" aria-label="Permalink to &quot;事件监听对象&quot;">​</a></h2><table tabindex="0"><thead><tr><th>属性</th><th>方法</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td></td><td>handleEvent()</td><td>把任意对象注册为事件处理程序</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="文档事件对象" tabindex="-1">文档事件对象 <a class="header-anchor" href="#文档事件对象" aria-label="Permalink to &quot;文档事件对象&quot;">​</a></h2><table tabindex="0"><thead><tr><th>属性</th><th>方法</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td></td><td>createEvent()</td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="鼠标-键盘事件对象" tabindex="-1">鼠标/键盘事件对象 <a class="header-anchor" href="#鼠标-键盘事件对象" aria-label="Permalink to &quot;鼠标/键盘事件对象&quot;">​</a></h2><p>| 属性 | 方法 | 描述 | 例子 | | ------------- | ------------------- | ----------------------------------------------- | ---- | --- | | altKey | | | | | button | | event.button 可以知道是鼠标的那个按键左、右、中 | | | clientX | | | | | clientY | | | | | ctrlKey | | | | | Location | | | | | charCode | | | | | key | | | | | keyCode | | | | | which | | | | | metaKey | | | | | relatedTarget | | | | | screenX | | | | | screenY | | | | | shiftKey | | | | | | initMouseEvent() | 初始化鼠标事件对象 | | | | | initKeyboardEvent() | 初始化键盘事件对象 | | | | | | | | |</p><h2 id="焦点事件" tabindex="-1">焦点事件 <a class="header-anchor" href="#焦点事件" aria-label="Permalink to &quot;焦点事件&quot;">​</a></h2><blockquote><p>判断浏览器是否支持：<code>document.implementation.hasFeature(&quot;FocusEvent&quot;),&quot;3.0&quot;</code></p></blockquote><table tabindex="0"><thead><tr><th>触发次序</th><th>冒泡事件</th><th>非冒泡事件</th><th>描述</th><th>用例</th></tr></thead><tbody><tr><td>1</td><td>focusout</td><td></td><td>失去焦点大多浏览器</td><td></td></tr><tr><td>2</td><td>focusint</td><td></td><td>获得焦点，大多浏览器</td><td></td></tr><tr><td>3</td><td></td><td><code>blur</code></td><td>元素失去焦点，浏览器都支持</td><td></td></tr><tr><td>4</td><td>DOMFocusOut</td><td></td><td>失去焦点,Opera 支持</td><td></td></tr><tr><td>5</td><td></td><td><code>focus</code></td><td>不冒泡，获得焦点触发</td><td></td></tr><tr><td>6</td><td>DOMFocusIn</td><td></td><td>冒泡,Opera 支持</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><blockquote><p>郁闷，2018 年 10 月 31 日这一天面试，其实我都有做过，而且自然而然的做过，竟然答不上来，知识体系全部混乱。 这样下去，如果面试一些基础题，我真的可能找不到工作了。 之前也没怎么考虑是事件委托还是代理，自然而然就这样处理事件了。比如之前人工写的轮播在那个智能官网里面的，也没多想了，可谁知道那就是事件委托，哔了狗。</p></blockquote><ul><li>如何去声明和使用事件，以点击事件来说</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!--onclick---&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;button&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> btn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;button&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> changeColorA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> changeColorB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> changeColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     btn.style.backgroundColor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16777215</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //方式1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   btn.onclick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">changeColor;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //方式2  以添加addEventListener 函数来完成。具名函数方式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   btn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,changeColor);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //方式3 匿名函数来指代一下也是可以的</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   btn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       btn.style.backgroundColor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16777215</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 移除事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   btn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,changeColor);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 添加多个事件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //  无法实现并存的方式，后者会覆盖前者</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   btn.onclick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">changeColorA;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   btn.onclick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">changeColorB;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //使用事件监听器注册的话，就可以实现了!!兼容性，addEventListener只支持到IE9</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   btn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,changeColorA);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   btn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,changeColorB)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //有些情况，如submit 事件总会使用preventDefault()阻止默认行为</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="事件委托-事件代理" tabindex="-1">事件委托/事件代理 <a class="header-anchor" href="#事件委托-事件代理" aria-label="Permalink to &quot;事件委托/事件代理&quot;">​</a></h2><ul><li>什么时候用到？for 循环里面多个点击事件，一次操作就可以完成，减少 DOM 操作次数</li><li>原理：利用事件的 <code>冒泡原理</code> 来实现，</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;1&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;2&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;3&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;4&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;5&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 很蠢的对每个li 标签都循环做点击事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ul </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ul&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> li </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;li&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> li.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    li[i].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onclick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><ul><li><p>事件冒泡</p><ul><li><p>什么是冒泡原理？</p></li><li><p>什么是事件冒泡？</p><blockquote><p>事件从最深的节点开始，逐步向上传播事件，div&gt;ul&gt;li&gt;a，给 a 添加事件，事件就会一层一层的往外执行，执行顺序为 a-&gt;li-&gt;ul-&gt;div</p></blockquote></li><li><p>机制</p><blockquote><p>给最外面的 div 加点击事件，<code>这里理解？：它的后代都会被点击到</code> 那么 ul li a 做点击的时候，都会冒泡到最外层 div，也就是会触发。这就是事件委托，委托父级代为执行事件。反正最后都会被冒泡到？？</p></blockquote></li><li><p>事件冒泡和事件捕获</p><ul><li>捕获阶段 <code>父级-&gt;子级，向里</code><ul><li>检查最外层 <code>html</code>，是否在捕获阶段注册一个 <code>onclick</code> 事件处理程序，如果是，则运行</li><li>然后移动到下一个元素，并执行相同操作，直到实际点击的元素</li><li><strong>结论是：事件始终从 html 层开始？</strong></li><li>顺序：父级——&gt;子级、外到里</li></ul></li><li>冒泡阶段 <code>子级-&gt;父级，向外</code><ul><li>检查实际点击元素是否在冒泡阶段注册 <code>onclick</code> 事件，如果是则运行</li><li>然后移动到直接祖先，然后同上，直至 <code>html</code> 元素</li><li>时间处理程序都在冒泡阶段注册 <code>(但可以使用addEventListener(,,true) 在捕获阶段注册</code></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">video.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onclick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stopPropagation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//阻止冒泡链扩大</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  video.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">play</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//播放视频</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div></li><li>事件委托 <code>由于冒泡而被允许的概念</code><ul><li>通过委托父级，<code>addEventListener</code> 设置在父节点上，将事件监听器气泡的影响每个子节点，而不是每个子节点都设置事件监听器</li></ul></li></ul></li></ul></li></ul>`,52)]))}const g=s(n,[["render",h]]);export{o as __pageData,g as default};
