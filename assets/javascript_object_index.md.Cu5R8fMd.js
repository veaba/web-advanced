import{_ as t,c as a,o,aa as d}from"./chunks/framework.qnqjiyko.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/object/index.md","filePath":"javascript/object/index.md"}'),r={name:"javascript/object/index.md"};function c(l,e,i,n,s,b){return o(),a("div",null,e[0]||(e[0]=[d('<h2 id="js-三大对象" tabindex="-1">js 三大对象 <a class="header-anchor" href="#js-三大对象" aria-label="Permalink to &quot;js 三大对象&quot;">​</a></h2><p><a href="https://segmentfault.com/a/1190000011467723" target="_blank" rel="noreferrer">SegmentFault 查看更多，作者 Adrain`</a></p><h2 id="本地对象" tabindex="-1">本地对象 <a class="header-anchor" href="#本地对象" aria-label="Permalink to &quot;本地对象&quot;">​</a></h2><ul><li>与宿主无关，独立于宿主环境的 ECMAScript 实现提供的对象</li><li>ECMA-262 定义的类 (引用类型)</li><li>该类引用类型在运行过程中需要通过 new 创建所需的实例对象</li><li>包含 <code>Object</code>、<code>Array</code>、<code>Date</code>、<code>RegExp</code>、<code>Function</code>、<code>Boolean</code>、<code>Number</code>、<code>String</code> 等</li></ul><h2 id="宿主对象" tabindex="-1">宿主对象 <a class="header-anchor" href="#宿主对象" aria-label="Permalink to &quot;宿主对象&quot;">​</a></h2><ul><li>由 ECMAScript 实现的宿主环境提供的对象，包含两个大类，一个是宿主提供，一个是自定义类对象</li><li>所有非本地对象都是宿主对象</li><li>嵌入网页的 js 来讲，宿主就是浏览器提供的对象，包括 <code>window</code> 和 <code>Document</code></li><li>所有 DOM 和 BOM 对象都属于宿主对象</li></ul><h2 id="内置对象" tabindex="-1">内置对象 <a class="header-anchor" href="#内置对象" aria-label="Permalink to &quot;内置对象&quot;">​</a></h2><ul><li>与宿主无关，独立于宿主环境的 ECMAScript 实现提供的对象</li><li>ECMAScript 程序开始执行前就存在，本身就是实例化内置对象，无需实例化</li><li>内置对象是本地对象的子集</li><li>包含 <code>Global</code> 和 <code>Math</code></li><li>ECMAScript 5 中新增了 <code>JSON</code> 这个存在于全局的内置对象</li></ul><h2 id="静态方法" tabindex="-1">静态方法 <a class="header-anchor" href="#静态方法" aria-label="Permalink to &quot;静态方法&quot;">​</a></h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">more detail</a></li></ul><table tabindex="0"><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><code>Object.getPrototypeOf(obj)</code></td><td>返回指定对象的原型</td></tr><tr><td><code>Object.setPrototypeOf(obj, prototype)</code></td><td>设置指定对象的原型</td></tr><tr><td><code>Object.seal(obj)</code></td><td>不能添加新属性，也不能删除现有属性，可以修改已有属性</td></tr><tr><td><code>Object.freeze(obj)</code></td><td>冻结对象，比 seal 更严</td></tr><tr><td><code>Object.isSealed(obj)</code></td><td>检查对象是否被密封</td></tr><tr><td><code>Object.isFrozen(obj)</code></td><td>检查对象是否被冻结</td></tr><tr><td></td><td></td></tr></tbody></table>',11)]))}const u=t(r,[["render",c]]);export{p as __pageData,u as default};
